package com._4point.aem.watchedfolder.core;

import static org.hamcrest.MatcherAssert.assertThat; 
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.StringReader;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class GitCommitTest {
	private final static DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ");
	private static final boolean EXPECTED_DIRTY = true;
	private static final String EXPECTED_BUILD_TIME_NO_TIMEZONE = "2023-02-24T14:44:42";
	private static final String EXPECTED_COMMIT_TIME_NO_TIMEZONE = "2023-02-24T13:28:32";
	private static final ZonedDateTime EXPECTED_BUILD_TIME = ZonedDateTime.parse(EXPECTED_BUILD_TIME_NO_TIMEZONE + "-0500", DATETIME_FORMATTER);
	private static final ZonedDateTime EXPECTED_COMMIT_TIME = ZonedDateTime.parse(EXPECTED_COMMIT_TIME_NO_TIMEZONE + "-0500", DATETIME_FORMATTER);
	private static final String BUILD_TIME_STR = "2023-02-24T14\\:44\\:42-0500";
	private static final String COMMIT_TIME_STR = "2023-02-24T13\\:28\\:32-0500";
	private static final String DIRTY_STR = "true";
	private static final String EXPECTED_BRANCH = "main";
	private static final String EXPECTED_COMMIT_ID_ABBREV = "82b2006";
	private static final String EXPECTED_COMMIT_ID_FULL = EXPECTED_COMMIT_ID_ABBREV + "1809bdd4b60ec7f480227727fcb00355f";
	
	private final String GIT_PROPERTIES = "#Generated by Git-Commit-Id-Plugin\n"
			+ "git.branch=" + EXPECTED_BRANCH + "\n"
			+ "git.build.host=FPS-PF1CFRRL\n"
			+ "git.build.time=" + BUILD_TIME_STR + "\n"
			+ "git.build.user.email=rmcdougawww@rogers.com\n"
			+ "git.build.user.name=Rob McDougall\n"
			+ "git.build.version=0.0.1-SNAPSHOT\n"
			+ "git.closest.tag.commit.count=\n"
			+ "git.closest.tag.name=\n"
			+ "git.commit.author.time=2023-02-24T13\\:28\\:32-0500\n"
			+ "git.commit.committer.time=2023-02-24T13\\:28\\:32-0500\n"
			+ "git.commit.id.abbrev=" + EXPECTED_COMMIT_ID_ABBREV + "\n"
			+ "git.commit.id.describe=82b2006-dirty\n"
			+ "git.commit.id.describe-short=82b2006-dirty\n"
			+ "git.commit.id.full=" + EXPECTED_COMMIT_ID_FULL + "\n"
			+ "git.commit.message.full=Removed closing of Document objects\\n\\nAEM does this for us and if we do it, then AEM produces a warning\\nmessage.  I just make sure we close the InputStreams now.\n"
			+ "git.commit.message.short=Removed closing of Document objects\n"
			+ "git.commit.time=" + COMMIT_TIME_STR + "\n"
			+ "git.commit.user.email=rmcdougawww@rogers.com\n"
			+ "git.commit.user.name=Rob McDougall\n"
			+ "git.dirty=" + DIRTY_STR + "\n"
			+ "git.local.branch.ahead=0\n"
			+ "git.local.branch.behind=0\n"
			+ "git.remote.origin.url=https\\://github.com/4PointSolutions/WatchedFolderUtils.git\n"
			+ "git.tags=\n"
			+ "git.total.commit.count=22\n"
			;

	@BeforeEach
	void setUp() throws Exception {
		
	}

	@Test
	void testProperties() throws Exception {
		Properties properties = new Properties();
		properties.load(new StringReader(GIT_PROPERTIES));

		GitCommit underTest = new GitCommit(properties);
		assertAll(
				()->assertEquals(EXPECTED_BRANCH, underTest.branch()),
				()->assertEquals(EXPECTED_COMMIT_ID_ABBREV, underTest.commitIdAbbrev()),
				()->assertEquals(EXPECTED_COMMIT_ID_FULL, underTest.commitIdFull()),
				()->assertEquals(EXPECTED_DIRTY, underTest.dirty()),
				()->assertEquals(EXPECTED_COMMIT_TIME.toInstant(), underTest.commitTime().toInstant()),
				()->assertEquals(EXPECTED_BUILD_TIME.toInstant(), underTest.buildTime().toInstant())
				);
	}
	
	@Test
	void testSummary() throws Exception {
		Properties properties = new Properties();
		properties.load(new StringReader(GIT_PROPERTIES));

		GitCommit underTest = new GitCommit(properties);

		assertThat(underTest.summary(), allOf(
							containsString(EXPECTED_BRANCH), 
							containsString(EXPECTED_COMMIT_ID_ABBREV),
							containsString("*"),
							matchesPattern("^.*2023-02-24T..:44:42.*$"),	// Ignore the hours, since they will be different 
							matchesPattern("^.*2023-02-24T..:28:32.*$")		// depending on the machine's local timezone.
							));
	}	
}
